{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            },
            "defaultValue": "[deployment().properties.templateLink.uri]"
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            },
            "defaultValue": ""
        },
        "guidValue": {
            "type": "string",
            "defaultValue": "[newGuid()]"
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
            }
        },
        "adminVmSizeSelect": {
            "type": "string",
            "defaultValue": "Standard_D2_v3",
            "metadata": {
                "description": "Select appropriate VM Size as per requirement (Standard_A1, Standard_A2, Standard_A3, Standard_A4) for admin node"
            }
        },
        "managedVmSizeSelect": {
            "type": "string",
            "defaultValue": "Standard_D2_v3",
            "metadata": {
                "description": "Select appropriate VM Size as per requirement (Standard_A1, Standard_A2, Standard_A3, Standard_A4) for managed node"
            }
        },
        "numberOfInstances": {
            "type": "int",
            "defaultValue": 2,
            "minValue": 2,
            "maxValue": 5,
            "metadata": {
                "description": "Number of VMs to deploy, limit 5 since this sample is using a single storage account"
            }
        },
        "linuxOSVersion": {
            "type": "string",
            "defaultValue": "7.6",
            "allowedValues": [
                "7.4",
                "7.6"
            ],
            "metadata": {
                "description": "Select appropriate Oracle Linux version"
            }
        },
        "identity": {
            "type": "object",
            "metadata": {
                "description": "User-assigned managed identity granted with contributor role of the same subscription"
            }
        },
        "acceptOTNLicenseAgreement": {
            "type": "string",
            "metadata": {
                "description": "Do you agree to provide OTN credentials to accept OTN License Agreement? Enter Y or y to agree, else N or n"
            }
        },
        "otnCredentials": {
            "type": "object",
            "metadata": {
                "description": "Username and password for your Oracle Technology Network account"
            }
        },
        "migrationStorage": {
            "type": "object",
            "metadata": {
                "description": "source environment files"
            }
        },
        "sourceEnv": {
            "type": "object",
            "metadata": {
                "description": "source environment details"
            }
        }
    },
    "variables": {
        "storageAccountName": "[concat(take(replace(parameters('guidValue'),'-',''),6),'olvm')]",
        "imagePublisher": "Oracle",
        "imageOffer": "Oracle-Linux",
        "nicName": "olvmNIC",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "Subnet",
        "subnetPrefix": "10.0.0.0/24",
        "storageAccountType": "Standard_LRS",
        "publicIPAddressType": "Dynamic",
        "virtualNetworkName": "olvmVNET",
        "migrationScript": "migration.sh",
        "adminMigrationScript": "adminMigration.sh",
        "managedMigrationScript": "managedMigration.sh",
        "managedStartScript": "managedStart.sh",
        "linuxOSVersion": "[parameters('linuxOSVersion')]",
        "const_portsToExpose": "22,80,443,7001-9000",
        "const_dnsLabelPrefix":"wls",
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
        "networkSecurityGroupName": "[concat(variables('const_dnsLabelPrefix'), '-nsg')]",
        "networkSecurityGroupRef": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]",
        "requiredPortrange": ",65200-65535,5556",
        "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
        "const_adminVMName": "targetAdminVM",
        "const_managedVMPrefix": "targetMspVM",
        "name_publicIPAddress": "_PublicIP",
        "name_availabilitySet": "WLSCluster-AvailabilitySet"
    },
    "resources": [
        {
            "apiVersion": "2019-10-01",
            "name": "create-target-environment-and-lift-shift-start",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-06-01",
            "name": "[variables('networkSecurityGroupName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "WebLogicPorts",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 320,
                            "direction": "Inbound",
                            "destinationPortRanges": "[split(concat(variables('const_portsToExpose'),variables('requiredPortrange')), ',')]"
                        }
                    },
                    {
                        "name": "WebLogicNMPort",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "Internet",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 201,
                            "direction": "Inbound",
                            "destinationPortRanges": [ "5556" ]
                        }
                    },
                    {
                        "name": "WebLogicAdminChannelPort",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "Internet",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 202,
                            "direction": "Inbound",
                            "destinationPortRanges": [ "7005" ]
                        }
                    },
                    {
                        "name": "WebLogicManagedChannelPortsDenied",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 230,
                            "direction": "Inbound",
                            "destinationPortRanges": [
                                "8501"
                            ],
                            "sourceAddressPrefix": "Internet"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-11-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[variables('storageAccountType')]"
            },
            "kind": "Storage",
            "properties": {
                "supportsHttpsTrafficOnly": false
            },
            "dependsOn": [
                "[variables('networkSecurityGroupName')]"
            ]
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2018-11-01",
            "name": "[if(equals(copyIndex(),0),concat(variables('const_adminVMName'),variables('name_publicIPAddress')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_publicIPAddress')))]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "publicIPLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[concat(toLower(variables('const_dnsLabelPrefix')),copyindex(),'-',take(replace(parameters('guidValue'),'-',''),10))]"
                }
            },
            "dependsOn": [
                "[variables('storageAccountName')]"
            ]
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2018-11-01",
            "name": "[variables('virtualNetworkName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('networkSecurityGroupRef')]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('addressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]",
                            "networkSecurityGroup": {
                                "id": "[variables('networkSecurityGroupRef')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2018-11-01",
            "name": "[if(equals(copyIndex(),0),concat(variables('const_adminVMName'),variables('nicName')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('nicName')))]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "nicLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "dependsOn": [
                "publicIPLoop",
                "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses',if(equals(copyIndex(),0),concat(variables('const_adminVMName'),variables('name_publicIPAddress')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('name_publicIPAddress'))))]"
                            },
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            }
                        }
                    }
                ],
                "dnsSettings": {
                    "internalDnsNameLabel": "[if(equals(copyIndex(),0),variables('const_adminVMName'),concat(variables('const_managedVMPrefix'), copyIndex()))]"
                }
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2020-06-01",
            "location": "[parameters('location')]",
            "name": "[variables('name_availabilitySet')]",
            "properties": {
                "platformFaultDomainCount": 2,
                "platformUpdateDomainCount": 2
            },
            "dependsOn": [
                "[variables('virtualNetworkName')]"
            ],
            "sku": {
                "name": "Aligned"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2018-10-01",
            "name": "[if(equals(copyIndex(),0),variables('const_adminVMName'),concat(variables('const_managedVMPrefix'), copyIndex()))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "nicLoop",
                "[resourceId('Microsoft.Compute/availabilitySets/', variables('name_availabilitySet'))]"
            ],
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[parameters('numberOfInstances')]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('name_availabilitySet'))]"
                },
                "hardwareProfile": {
                    "vmSize": "[if(equals(copyIndex(),0), parameters('adminVmSizeSelect'), parameters('managedVmSizeSelect'))]"
                },
                "osProfile": {
                    "computerName": "[if(equals(copyIndex(),0),variables('const_adminVMName'),concat(variables('const_managedVMPrefix'), copyIndex()))]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('imagePublisher')]",
                        "offer": "[variables('imageOffer')]",
                        "sku": "[variables('linuxOSVersion')]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "createOption": "FromImage"
                    },
                    "dataDisks": [
                        {
                            "diskSizeGB": 900,
                            "lun": 0,
                            "createOption": "Empty"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',if(equals(copyIndex(),0),concat(variables('const_adminVMName'),variables('nicName')),concat(variables('const_managedVMPrefix'), copyIndex(),variables('nicName'))))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2019-06-01').primaryEndpoints.blob]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2020-10-01",
            "name": "deploymentscripttest",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/',variables('const_adminVMName'))]",
                "virtualMachineLoop"
            ],
            "kind": "AzureCLI",
            "identity": "[parameters('identity')]",
            "properties": {
                "AzCliVersion": "2.15.0",
                "arguments": "[concat(parameters('acceptOTNLicenseAgreement'),' ',replace(string(parameters('otnCredentials')), '\"', '\\\"'),' ',replace(string(parameters('migrationStorage')), '\"', '\\\"'),' ',replace(string(parameters('sourceEnv')), '\"', '\\\"'),' ',variables('const_adminVMName'),' ',variables('const_managedVMPrefix'),' ',parameters('numberOfInstances'),' ',variables('const_scriptLocation'),' ',resourceGroup().name)]",
                "primaryScriptUri": "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('migrationScript'), parameters('_artifactsLocationSasToken')))]",
                "supportingScriptsUris": [
                    "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('adminMigrationScript'), parameters('_artifactsLocationSasToken')))]",
                    "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('managedMigrationScript'), parameters('_artifactsLocationSasToken')))]",
                    "[uri(parameters('_artifactsLocation'), concat('scripts/', variables('managedStartScript'), parameters('_artifactsLocationSasToken')))]"
                ],
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "P1D"
            }
        },
        {
            "apiVersion": "2019-10-01",
            "name": "create-target-environment-and-lift-shift-end",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "deploymentscripttest"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        }
    ],
    "outputs": {
        "adminHostname": {
            "type": "string",
            "value": "[reference(concat(variables('const_adminVMName'),variables('name_publicIPAddress'))).dnsSettings.fqdn]"
        }
    }
}